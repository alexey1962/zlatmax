$browser-context: 16; // Default
$rem-base: 16;

@function em($pixels, $context: $browser-context) {
    @return #{calc($pixels/$context)}em;
}

@function rem($pixels, $context: $rem-base) {
    @return #{calc($pixels/$context)}rem;
}

@function percent($firstNum, $secondNum) {
    @return math.div($firstNum, $secondNum)*100%;
}

@mixin adaptiveValue($func, $startVal, $minVal, $type: 1, $widthFrom: $maxWidthContainer, $widthTo: $minWidth) {
    $addSize: $startVal - $minVal;

    @if $type == 1 {
        #{$func}: $startVal + px;
        @media(max-width: #{$widthFrom + px}) {
            #{$func}: calc(#{$minVal + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$maxWidthContainer - $widthTo}))
        }
    } @else if $type == 2 {
        #{$func}: $startVal + px;
        @media(min-width: #{$widthFrom + px}) {
            #{$func}: calc(#{$minVal + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$maxWidth - $widthTo}))
        } 
    } @else if $type == 3 {
        @media(max-width: #{$widthFrom + px}) {
            #{$func}: calc(#{$minVal + '%'} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$maxWidthContainer - $widthTo}))
        }
    } @else {
        #{$func}: calc(#{$minVal + px} + #{$addSize} * ((100vw - #{$widthTo + px}) / #{$maxWidth - $widthTo}))
    }
}